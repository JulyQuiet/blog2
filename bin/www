#!/usr/bin/env node
//此文件需要用node来运行
/**
 * Module dependencies.//模块的依赖
 */
//引入app，是一个请求监听处理函数
var app = require('../app');
//debug这是一个写日志的模块
var debug = require('debug')('blog2:server');
//引入了http模块
var http = require('http');

/**
 * 从环境变量中获取端口号并且保存在express内部
 */

var port = normalizePort(process.env.PORT || '3000');
//在内部保存一个值
app.set('port', port);
//app.get('port');

/**
 * Create HTTP server.
 * 创建一个http服务
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 * 在提供的端口上监听 所有的客户端请求
 */

server.listen(port);
//监听
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  //处理特定的监听，提供更加在友好的信息
  switch (error.code) {
    case 'EACCES':
      //绑定此窗口需要额外的权限 mac linux 1000以下的端口需要管理员全新
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      //端口被占用
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 * 在服务器监听成功后执行的回调函数
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
